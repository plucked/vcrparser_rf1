//--------------------------------------
//--- 010 Editor v4.0.3 Binary Template
//
// File: Template for rFactor Replays
// Author: Rainer Heynke
// Revision: 1
// Purpose: Personal Usage
//--------------------------------------

enum EventClass
{
	ECLASS_LOC = 0,
	ECLASS_VFX,
	ECLASS_SFX,
	ECLASS_SYS,
	ECLASS_COMM,
	ECLASS_OTHER,
	ECLASS_MAXIMUM
};

	const int ETYPE_NOTYPE = 63; // doesn’t need to be anything in particular, but this is the number least likely to be used for a real event type

	// ECLASS_LOC events
	const int ETYPE_CONE = 0; // cone state
	const int ETYPE_POST = 1; // post state
	const int ETYPE_SIGN = 2; // sign state
	const int ETYPE_WHEEL = 3; // wheel state
	const int ETYPE_WING = 4; // wing state
	const int ETYPE_PART = 5; // part state
	// note: do not change order of the ETYPE_*LOC events!
	const int ETYPE_ZIPUPDATE = 6; // tells server that last zip can be safely extrapolated
	const int ETYPE_ZIPLOC_R = 7; // compressed vehicle loc (more detailed than SIMPLELOC)
	const int ETYPE_ZIPLOC_N = 8; // compressed vehicle loc
	const int ETYPE_ZIPLOC_1 = 9; // compressed vehicle loc
	const int ETYPE_ZIPLOC_2 = 10; // compressed vehicle loc
	const int ETYPE_ZIPLOC_3 = 11; // compressed vehicle loc
	const int ETYPE_ZIPLOC_4 = 12; // compressed vehicle loc
	const int ETYPE_ZIPLOC_5 = 13; // compressed vehicle loc
	const int ETYPE_ZIPLOC_6 = 14; // compressed vehicle loc
	const int ETYPE_ZIPLOC_7 = 15; // compressed vehicle loc
	const int ETYPE_SIMPLELOC_00 = 16; // simplified location event (smaller than ZIPLOC)
	const int ETYPE_SIMPLELOC_01 = 17; // simplified location event
	const int ETYPE_SIMPLELOC_02 = 18; // simplified location event
	const int ETYPE_SIMPLELOC_03 = 19; // simplified location event
	const int ETYPE_SIMPLELOC_04 = 20; // simplified location event
	const int ETYPE_SIMPLELOC_05 = 21; // simplified location event
	const int ETYPE_SIMPLELOC_06 = 22; // simplified location event
	const int ETYPE_SIMPLELOC_07 = 23; // simplified location event
	const int ETYPE_SIMPLELOC_08 = 24; // simplified location event
	const int ETYPE_SIMPLELOC_09 = 25; // simplified location event
	const int ETYPE_SIMPLELOC_10 = 26; // simplified location event
	const int ETYPE_SIMPLELOC_11 = 27; // simplified location event
	const int ETYPE_SIMPLELOC_12 = 28; // simplified location event
	const int ETYPE_SIMPLELOC_13 = 29; // simplified location event
	const int ETYPE_SIMPLELOC_14 = 30; // simplified location event
	const int ETYPE_SIMPLELOC_15 = 31; // simplified location event
	const int ETYPE_SIMPLELOC_16 = 32; // simplified location event
	const int ETYPE_SIMPLELOC_17 = 33; // simplified location event
	const int ETYPE_SIMPLELOC_18 = 34; // simplified location event
	const int ETYPE_SIMPLELOC_19 = 35; // simplified location event
	const int ETYPE_SIMPLELOC_20 = 36; // simplified location event
	const int ETYPE_SIMPLELOC_21 = 37; // simplified location event
	const int ETYPE_SIMPLELOC_22 = 38; // simplified location event
	const int ETYPE_SIMPLELOC_23 = 39; // simplified location event
	const int ETYPE_SIMPLELOC_24 = 40; // simplified location event
	const int ETYPE_SIMPLELOC_25 = 41; // simplified location event
	const int ETYPE_SIMPLELOC_26 = 42; // simplified location event
	const int ETYPE_SIMPLELOC_27 = 43; // simplified location event
	const int ETYPE_SIMPLELOC_28 = 44; // simplified location event
	const int ETYPE_SIMPLELOC_29 = 45; // simplified location event
	const int ETYPE_SIMPLELOC_30 = 46; // simplified location event
	const int ETYPE_SIMPLELOC_31 = 47; // simplified location event
	const int ETYPE_SIMPLELOC_32 = 48; // simplified location event

	// ECLASS_VFX events
	const int ETYPE_BACKFIRE = 0; // veh backfire animation
	const int ETYPE_LIGHT = 1; // veh rain light switch
	const int ETYPE_TERRAIN = 2; // terrain conditions event
	const int ETYPE_COPTER = 3; // sends the helicopter on its way
	const int ETYPE_WEATHER = 4; // weather updates from the server
	const int ETYPE_CLOUDMAP = 5; // cloud texture map names
	const int ETYPE_LIGHTNING = 6; // lightning
	const int ETYPE_DENT_BODY = 7; // dent bodywork
	const int ETYPE_RESET_BODY = 8; // reset bodywork (vehicle reset to pits or something)
	const int ETYPE_WALLSKID = 9; // generate skid on wall
	const int ETYPE_RACELIGHTS = 10; // start lights, pit entrance & exit lights, maybe caution lights around track?

	// ECLASS_SFX events
	const int ETYPE_VEHSFX_START = 0; // starts a vehicle sound effect
	const int ETYPE_THUNDER = 1; // thunder
	const int ETYPE_PIT_HORN = 2; // pit horn plays when someone enters pits

	// ECLASS_SYS events
	const int ETYPE_SYNC_NOTIFY = 0; // server sends this to client if client should send a sync request (state change, etc)
	const int ETYPE_PLAYER_READY = 1; // message from client to server requesting verification
	const int ETYPE_PLAYER_VERIFY = 2; // server to client, data verify along with any changes
	const int ETYPE_TRACKTOLOAD = 3; // server to client, new track is being loaded
	const int ETYPE_CHATMSG = 4; // chat message, bi-directional
	const int ETYPE_SCOREBOARD = 5; // score update
	const int ETYPE_CHECKPOINT = 6;
	const int ETYPE_SPEEDCOMP = 7;
	const int ETYPE_NEWSTATIONS = 8; // complete new list of all active flag stations
	const int ETYPE_UPDATESTATIONS = 9; // update flag stations

	const int ETYPE_COUNTDOWN = 10; // start countdown
	const int ETYPE_NEXTPHASE = 11; // move to next phase
	const int ETYPE_SKIPFORMATION = 12; // skip formation lap

	const int ETYPE_YELLOW_FLAG = 13;
	const int ETYPE_STOP_GO = 14; // received stop/go
	const int ETYPE_SERVE_STOP_GO = 15; // served stop/go

	const int ETYPE_DNF = 16; // DNF player
	const int ETYPE_UNDO_DNF = 17; // Undo DNF
	const int ETYPE_DISQUALIFY = 18;
	const int ETYPE_CLIENTKICK = 19; // used to kick client

	const int ETYPE_PIT_BLUE_ON = 20; // pit exit flashing blue
	const int ETYPE_PIT_BLUE_OFF = 21; // pit exit not flashing blue

	const int ETYPE_TRACK_ORDER = 24; // order of vehicles on track (while under yellow flag)
	const int ETYPE_SAFETY_CAR_ON = 25; // safety car is active
	const int ETYPE_SAFETY_CAR_OFF = 26; // safety car is not active
	const int ETYPE_SAFETY_CAR_LAPS = 27; // set the number of safety car formation laps

	const int ETYPE_NEW_ENGINE = 28; // slot needed new engine during warmup (so send to back of grid)
	const int ETYPE_QUAL_ORDER = 29; // listing of new qualifying order (used when player

	const int ETYPE_TORDER_ADD = 30; // client -> server msg, if client is added from track order
	const int ETYPE_TORDER_REMOVE = 31; // client -> server msg, if client is removed from 	track order
	const int ETYPE_TORDER_TOBACK = 32; // client -> server msg, if client is removed from 	track order
	const int ETYPE_TRACK_CLOSED = 33; // server -> client msg, track has been closed for 	business
	const int ETYPE_TRACK_OPENED = 34; // server -> client msg, track has been opened for 	business
	const int ETYPE_ENTRY_DATA = 35; // client -> server, client is sending entry data
	const int ETYPE_ENTRY_DATA_OK = 36; // server -> client, entry data is ok
	const int ETYPE_ENTRY_DATA_NO = 37; // server -> client, entry data not allowed

	const int ETYPE_DRIVER_CHANGE = 38; // sent from previous driver to new driver (through server if necessary)
	const int ETYPE_DRIVER_CHANGE_NOTIFY = 39; // sent from previous driver to new (driver (through server if necessary)
	const int ETYPE_PASSENGER_CHANGE = 40; // notifies drivers that a passenger has joined/left their vehicle
	const int ETYPE_FILE_REQUEST = 41;
	const int ETYPE_FILE_HEADER = 42;
	const int ETYPE_NET_AI_INFO = 43; // server info about one multiplayer AI
	const int ETYPE_NET_AI_REQUEST = 44; // request server info about one or more AIs
	const int ETYPE_NET_RESTART = 45; // restart event or race in multiplayer
	const int ETYPE_CLIENT_VIEW = 46; // what client is looking at (slot or actual position) for server throttling purposes

	const int ETYPE_VOICE_CHAT_MIXED = 47; // voice chat data thats been mixed by the 	server and ready for client consumption
	const int ETYPE_VOICE_CHAT_CLIENT = 48; // voice chat data that the clients are	submitting to the server

	// ECLASS_OTHER events
	const int ETYPE_FIX = 0; // fix damage
	const int ETYPE_PITSTATE = 1; // change in pitstate
	const int ETYPE_BASICSCORE = 2; // basic score
	const int ETYPE_BASICSCORECLIENT = 3; // basic score client
	const int ETYPE_SIMULATEINTERNET = 4; // simulate some attributes of the Internet	for network testing purposes
	const int ETYPE_CALLVOTE_NEXTSESSION = 5; // “/callvote nextsession”
	const int ETYPE_CALLVOTE_NEXTEVENT = 6; // “/callvote nextrace”
	const int ETYPE_CALLVOTE_ADDAI = 7; // “/callvote addai”
	const int ETYPE_CALLVOTE_ADD5AI = 8; // “/callvote add5ai”
	const int ETYPE_CALLVOTE_REMOTESERVER = 9; // “/callvote kingme”
	const int ETYPE_CALLVOTE_RESTARTEVENT = 10; // “/callvote restartweekend”
	const int ETYPE_CALLVOTE_RESTARTRACE = 11; // “/callvote restartrace”
	const int ETYPE_VOTE_YES = 12; // “/vote yes”
	const int ETYPE_VOTE_NO = 13; // “/vote no”
	const int ETYPE_VOTEIGNORED_PARTICIPANT = 14; // “Vote ignored: Only active 		participants may vote”
	const int ETYPE_VOTEIGNORED_NOVOTE = 15; // “Vote ignored: There is no vote in 		progress”
	const int ETYPE_VOTEIGNORED_ONEVOTE = 16; // “Vote ignored: You can only vote 		once per issue”
	const int ETYPE_NODE_VOTED_YES = 17; // “%s voted YES to %s:” plus either “%d 		more to pass” or “vote PASSED”
	const int ETYPE_NODE_VOTED_NO = 18; // “%s voted NO to %s” 
	const int ETYPE_CANNOTCALL_DISABLED = 19; // “Cannot call vote: voting for %s is 		disabled”
	const int ETYPE_CANNOTCALL_INPROGRESS = 20; // “Cannot call vote: there is a vote in 		progress”
	const int ETYPE_CANNOTCALL_JUSTENDED = 21; // “Cannot call vote: voted just ended 		(wait %d seconds)”
	const int ETYPE_CANNOTCALL_PARTICIPANT = 22; // “Cannot call vote: must be server or active participant”
	const int ETYPE_CANNOTCALL_BEFORERACE = 23; // “Cannot call vote: cannot restart race before race starts”
	const int ETYPE_CANNOTCALL_PASTRACE = 24; // “Cannot call vote: cannot advance session past race”
	const int ETYPE_CANNOTCALL_MINVOTERS = 25; // “Cannot call vote: %d voters required”
	const int ETYPE_CANNOTCALL_RACERESTARTS = 26; // “Cannot call vote: no more race restarts allowed”
	const int ETYPE_CANNOTCALL_MOREAI = 27; // “Cannot call vote: no more AIs can be added”
	const int ETYPE_VOTE_PROPOSED = 28; // “\”%s\” proposed by %s:” plus either “%d vote(s) needed to pass” or “vote PASSED”
	const int ETYPE_WITHHOLDING_GREEN = 29; // WITHHOLDING_GREEN_MSG defined in steward.hpp
	const int ETYPE_CANNOTCALL_PLRNOTFOUND = 31; // “Cannot call vote: player specified not found”
	const int ETYPE_ADMIN_MSG = 32; // Some admin message
	const int ETYPE_CANNOTCALL_SPECEVENT = 33; // “Cannot call vote: circuit not found or request disallowed”


EventClass GetEventClass(unsigned long header) { return (EventClass)( header >> 29 ); }
unsigned long GetEventFlag(unsigned long header) { return ((header >> 27) & 0x03 ); }
unsigned long GetEventSession(unsigned long header) { return ((header >> 24) & 0x07 ); }
int GetEventType(unsigned long header) { return (int) ((header >> 18) & 0x03f ); }
unsigned long GetEventSize(unsigned long header) { return ((header >> 8 ) & 0x03ff); }
unsigned long GetEventOwner(unsigned long header) { return ( header & 0x0ff ); }

typedef struct
{
    char header_string[49];
    float version;
    int rfm_file_len;
    char rfm_file[rfm_file_len];
    int u_4;
    int scn_file_len;
    char scn_file[scn_file_len];
    int aiw_file_len;
    char aiw_file[aiw_file_len];
    
    char u_5;
    char session;
    unsigned short race_time; // char u_6[67]; // rF2
    long driverSize;
} Head_Frame;

typedef struct
{
    char slot_id;
    char name_len; // participant slot
    char name[name_len]; // name of primary driver     
    char co_name_len;
    //char co_name[co_name_len];
    char vehicle_file[32]; // name of co-driver if any
    char skin_file[32];
    unsigned char upgrade_pack[8]; // packed upgrade list
    float mEntryTime; // game ET of participants first appearance
    float mExitTime; // when participant leaves this slot
} Driver_Frame <optimize=false>;

typedef struct 
{
    float event_group_time <fgcolor=0x00FF00, bgcolor=0x0000FF>;;
	short event_group_count <fgcolor=0x00FF00, bgcolor=0x0000FF>;;
} Event_Group_Frame <optimize=false, fgcolor=0xDDDDDD, bgcolor=0x550000>;



typedef struct
{
    unsigned long event_header <comment=CommentEventOwner, fgcolor=0x00FF00>;
    char eventTimeAdjustment;
    
} Event_Header <optimize=false>;

string CommentEventOwner( unsigned long header )
{   
    string result;
    SPrintf(result, "Owner: %d Class: %d Type: %d Size: %d", GetEventOwner(header), GetEventClass(header), GetEventType(header), GetEventSize(header));
    return result;
} 

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_Unknown <optimize=false, fgcolor=cBlack, bgcolor=0x0000FF>;

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_SYNC_NOTIFY <optimize=false, fgcolor=cBlack, bgcolor=0x0000FF>;

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_PLAYER_READY <optimize=false, fgcolor=cBlack, bgcolor=0x0000FF>;

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_PLAYER_VERIFY <optimize=false, fgcolor=cBlack, bgcolor=0x0000FF>;

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_TRACKTOLOAD <optimize=false, fgcolor=cBlack, bgcolor=0x0000FF>;

typedef struct(int size)
{
    float bestLapSectors[3];
    unsigned char place[size - 12];
} Event_SCOREBOARD <optimize=false, fgcolor=cBlack, bgcolor=0x00FF00>;

typedef struct(int size)
{
    float lapTime;
    float checkpoint_time;
    unsigned char lap;
    unsigned char sector;
    char data[size - 10];
} Event_CHECKPOINT <optimize=false, fgcolor=cBlack, bgcolor=0x00FFFF>;

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_NEWSTATIONS <optimize=false, fgcolor=cBlack, bgcolor=0x0000FF>;

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_UPDATESTATIONS <optimize=false, fgcolor=cBlack, bgcolor=0x0000FF>;


typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_VFX <optimize=false, hidden=true, fgcolor=0x00FF00, bgcolor=0x0000FF>;

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_SFX <optimize=false, hidden=true, fgcolor=0x00FF00, bgcolor=0x0000FF>;

typedef struct(int size)
{
    if (size > 0)
        char data[size];
} Event_SYS <optimize=false, fgcolor=0x00FF00, bgcolor=0x0000FF>;

typedef struct(int size)
{
    unsigned long minfo1;
    int acc : 8;
    int rest : 24;
    //unsigned long minfo2;
   
short tire_spint_FL;
short tire_spint_FR;
short tire_spint_RL;
short tire_spint_RR;

short vel[3];
    char u[4];
    //if (size > 0)
    //    char data[size - 32];

    float posX; // position of the car
    float posZ;
    float posY;
    float angX; // orientation of the car
    float angZ;
    float angY;
} Event_ZIPLOC <optimize=false, hidden=true, fgcolor=0x00FFFF, bgcolor=0xFF00FF>;

typedef struct
{
    int u_1;
    int size_of_camera_name;
    char camera_name[size_of_camera_name];
    int driver;
    float camera_start_time; // replay time from beginning
    float camera_end_time; // replay time from beginning
    float camera_start_time_et; // in game time
    float camera_end_time_et; // in game time
    char u[12];
    int flags;
    int len;
    float u_2[len / 4];
} Camera <optimize=false>;

local int i = 0;

Head_Frame header;
Driver_Frame driver[header.driverSize];


float current_replay_time;
int unknown_i1;
int camera_flag;

if (camera_flag > 0)
{
    long Unkown_Frame_1;
    
    int u_int;
    int camera_count;
    
    Camera cameras[camera_count];
}


int event_groups;
int events;

float unknown_f1;
float unknown_f2;
float time_1;
float time_2;

//return;
local long temp = 0.0f;
local int pos = 815;
while(!FEof())
{
    Event_Group_Frame eventGroup;
    if (eventGroup.event_group_count > 255)
        return;
    for(i = 0; i < eventGroup.event_group_count; ++i)
    {
        Event_Header event_header;
        
        switch(GetEventClass(event_header.event_header))
        {
            case ECLASS_SYS:
            {
                switch(GetEventType(event_header.event_header))
                {
                case ETYPE_SYNC_NOTIFY:
                    Event_SYNC_NOTIFY sync_notify_event(GetEventSize(event_header.event_header));
                    break;
                case ETYPE_PLAYER_READY:
                    Event_PLAYER_READY player_ready_event(GetEventSize(event_header.event_header));
                    break;
                case ETYPE_PLAYER_VERIFY:
                    Event_PLAYER_VERIFY player_verify_event(GetEventSize(event_header.event_header));
                    break;
                case ETYPE_TRACKTOLOAD:
                    Event_TRACKTOLOAD tracktoload_event(GetEventSize(event_header.event_header));
                    break;
                case ETYPE_SCOREBOARD:
                    Event_SCOREBOARD scoreboard_event(GetEventSize(event_header.event_header));
                    break;
                case ETYPE_CHECKPOINT:
                    Event_CHECKPOINT checkpoint_event(GetEventSize(event_header.event_header));
                    break;
                case ETYPE_NEWSTATIONS:
                    Event_NEWSTATIONS newstations_event(GetEventSize(event_header.event_header));
                    break;
                case ETYPE_UPDATESTATIONS:
                    Event_UPDATESTATIONS update_stations_event(GetEventSize(event_header.event_header));
                    break;
                default:
                    if (GetEventSize(event_header.event_header) > 0)
                        Event_Unknown unknown_event(GetEventSize(event_header.event_header));
                }
                break;
            }
            case ECLASS_VFX:
            {
                Event_VFX vfx_event(GetEventSize(event_header.event_header));
                break;
            }
            case ECLASS_SFX:
            {
                Event_SFX sfx_event(GetEventSize(event_header.event_header));
                break;
            }
            case ECLASS_LOC:
            {
                if (GetEventType(event_header.event_header) >= ETYPE_ZIPLOC_R && GetEventType(event_header.event_header) <= ETYPE_ZIPLOC_7)
                {
                    Event_ZIPLOC ziploc_event(GetEventSize(event_header.event_header));
                    break;
                }
                if (GetEventSize(event_header.event_header) > 0)
                    Event_Unknown unknown_event(GetEventSize(event_header.event_header));
                break;
            }
            case ECLASS_SYS:
            {
                Event_SYS sys_event(GetEventSize(event_header.event_header));
                break;
            }
            default:
            {
                //FSkip(GetEventSize(event_header.event_header));
                if (GetEventSize(event_header.event_header) > 0)
                    Event_Unknown unknown_event(GetEventSize(event_header.event_header));
                break;
            }
        }
    }
}